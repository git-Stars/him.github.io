<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算等位时间</title>
      <link href="/2024/05/28/%E8%AE%A1%E7%AE%97%E7%AD%89%E4%BD%8D%E6%97%B6%E9%97%B4/"/>
      <url>/2024/05/28/%E8%AE%A1%E7%AE%97%E7%AD%89%E4%BD%8D%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;计算等位时间</span><br><span class="line">&gt;给定一个数组arr长度为n，表示n个服务员，每服务一个人的时间</span><br><span class="line">&gt;给定一个正数m，表示有m个人等位，如果你是刚来的人，请问你需要等多久？</span><br><span class="line">&gt;假设m远远大于n，比如n &lt;= 10^3, m &lt;= 10^9，该怎么做是最优解？</span><br><span class="line">&gt;谷歌的面试，这个题连考了2个月</span><br><span class="line">&gt;找不到测试链接，所以用对数器验证</span><br></pre></td></tr></table></figure></blockquote><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WaitingTime</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//直接最小堆，i , 已服务时间p</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">waitingTime1</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> m)</span>&#123;</span><br><span class="line">        <span class="comment">//空闲不用等</span></span><br><span class="line">        <span class="keyword">if</span> (m &lt; arr.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//每服务一个人的时长i, 总服务时间p</span></span><br><span class="line">        <span class="comment">//构建最小堆，根据总服务时长排列</span></span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(Comparator.comparingInt(a -&gt; a[<span class="number">1</span>]));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            queue.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;arr[i], <span class="number">0</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="comment">//弹出并增加服务时长</span></span><br><span class="line">            <span class="type">int</span>[] poll = queue.poll();</span><br><span class="line">            poll[<span class="number">1</span>] += poll[<span class="number">0</span>];</span><br><span class="line">            queue.add(poll);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此时堆顶就是等待时间</span></span><br><span class="line">        <span class="keyword">return</span> queue.peek()[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//二分答案求解</span></span><br><span class="line">    <span class="comment">//问题转化为当服务时间是x时，一共服务了y人，y &gt; m?</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">waitingTime2</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> m)</span>&#123;</span><br><span class="line">        <span class="comment">//求答案最大范围</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>, l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">            r = Math.max(i, r);</span><br><span class="line">        &#125;</span><br><span class="line">        r = r * m;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r)&#123;</span><br><span class="line">            <span class="comment">//以等待时间，即每个服务员必须工作的时间</span></span><br><span class="line">            mid = l + ((r-l)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (canService(mid, arr) &gt; m)&#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//每个服务员必须工作min分钟，一共能服务多少人</span></span><br><span class="line">    <span class="comment">//一般到了这一步就是自然智慧的解题思路</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">canService</span><span class="params">(<span class="type">int</span> min, <span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> n : arr) &#123;</span><br><span class="line">            ans += min / n + <span class="number">1</span>;<span class="comment">//结束的、开始的客人都算</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 堆模拟</span></span><br><span class="line">    <span class="comment">// 验证方法，不是重点</span></span><br><span class="line">    <span class="comment">// 如果m很大，该方法会超时</span></span><br><span class="line">    <span class="comment">// 时间复杂度O(m * log(n))，额外空间复杂度O(n)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">waitingTime3</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> m)</span> &#123;</span><br><span class="line">        <span class="comment">// 一个一个对象int[]</span></span><br><span class="line">        <span class="comment">// [醒来时间，服务一个客人要多久]</span></span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; heap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a, b) -&gt; (a[<span class="number">0</span>] - b[<span class="number">0</span>]));</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            heap.add(<span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">0</span>, arr[i] &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span>[] cur = heap.poll();</span><br><span class="line">            cur[<span class="number">0</span>] += cur[<span class="number">1</span>];</span><br><span class="line">            heap.add(cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> heap.peek()[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二分答案法</span></span><br><span class="line">    <span class="comment">// 最优解</span></span><br><span class="line">    <span class="comment">// 时间复杂度O(n * log(min * w))，额外空间复杂度O(1)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">waitingTime4</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> w)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : arr) &#123;</span><br><span class="line">            min = Math.min(min, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = min * w, m; l &lt;= r;) &#123;</span><br><span class="line">            <span class="comment">// m中点，表示一定要让服务员工作的时间！</span></span><br><span class="line">            m = l + ((r - l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 能够给几个客人提供服务</span></span><br><span class="line">            <span class="keyword">if</span> (f(arr, m) &gt;= w + <span class="number">1</span>) &#123;</span><br><span class="line">                ans = m;</span><br><span class="line">                r = m - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l = m + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果每个服务员工作time，可以接待几位客人（结束的、开始的客人都算）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> time)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : arr) &#123;</span><br><span class="line">            ans += (time / num) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对数器测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试开始&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">V</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">M</span> <span class="operator">=</span> <span class="number">3000</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">testTime</span> <span class="operator">=</span> <span class="number">20000</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; testTime; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.random() * N) + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span>[] arr = randomArray(n, V);</span><br><span class="line">            <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.random() * M);</span><br><span class="line">            <span class="type">int</span> <span class="variable">ans1</span> <span class="operator">=</span> waitingTime1(arr, m);</span><br><span class="line">            <span class="type">int</span> <span class="variable">ans2</span> <span class="operator">=</span> waitingTime2(arr, m);</span><br><span class="line">            <span class="comment">// int ans1 = waitingTime1(arr, m);</span></span><br><span class="line">            <span class="comment">// int ans2 = waitingTime3(arr, m);</span></span><br><span class="line">            <span class="keyword">if</span> (ans1 != ans2) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;出错了!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对数器测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] randomArray(<span class="type">int</span> n, <span class="type">int</span> v) &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            arr[i] = (<span class="type">int</span>) (Math.random() * v) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 二分答案法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分答案法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分割数组的最大值</title>
      <link href="/2024/05/28/%E5%88%86%E5%89%B2%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
      <url>/2024/05/28/%E5%88%86%E5%89%B2%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;分割数组的最大值(画匠问题)</span><br><span class="line">&gt;给定一个非负整数数组 nums 和一个整数 m</span><br><span class="line">&gt;你需要将这个数组分成 m 个非空的连续子数组。</span><br><span class="line">&gt;设计一个算法使得这 m 个子数组各自和的最大值最小。</span><br><span class="line">&gt;测试链接 : https://leetcode.cn/problems/split-array-largest-sum/</span><br></pre></td></tr></table></figure></blockquote><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [7,2,5,10,8], k = 2</span><br><span class="line">输出：18</span><br><span class="line">解释：</span><br><span class="line">一共有四种方法将 nums 分割为 2 个子数组。 </span><br><span class="line">其中最好的方式是将其分为 [7,2,5] 和 [10,8] 。</span><br><span class="line">因为此时这两个子数组各自的和的最大值为18，在所有情况中最小。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3,4,5], k = 2</span><br><span class="line">输出：9</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,4,4], k = 3</span><br><span class="line">输出：4</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 1000</code></li><li><code>0 &lt;= nums[i] &lt;= 106</code></li><li><code>1 &lt;= k &lt;= min(50, nums.length)</code></li></ul><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SplitArrayLargestSum</span> &#123;</span><br><span class="line">    <span class="comment">//二分答案法，转换下逻辑</span></span><br><span class="line">    <span class="comment">//当数组最大和是 x时，能否把数组分成k个？</span></span><br><span class="line">    <span class="comment">//所以二分答案数组最大和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">splitArray</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">//定义答案范围</span></span><br><span class="line">        <span class="comment">//数组和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            r += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r)&#123;</span><br><span class="line">            m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (can(nums, k, m))&#123;</span><br><span class="line">                ans = m;</span><br><span class="line">                r = m - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                l = m + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断子数组最大和是x下，能否分成k个数组 -》 符合最大和x的子数组小于等于k</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">can</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k, <span class="type">int</span> x)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>; r &lt; nums.length; r++) &#123;</span><br><span class="line">            <span class="comment">//如果某个数大于x，直接退出</span></span><br><span class="line">            <span class="keyword">if</span> (nums[r] &gt; x)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sum + nums[r] &gt; x)&#123;</span><br><span class="line">                ans++;</span><br><span class="line">                <span class="comment">//直接从这开始计数</span></span><br><span class="line">                sum = nums[r];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                sum += nums[r];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//加上最后一组数</span></span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">return</span> ans &lt;= k;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 二分答案法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分答案法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找出第K小的数对距离</title>
      <link href="/2024/05/28/%E6%89%BE%E5%87%BA%E7%AC%ACK%E5%B0%8F%E7%9A%84%E6%95%B0%E5%AF%B9%E8%B7%9D%E7%A6%BB/"/>
      <url>/2024/05/28/%E6%89%BE%E5%87%BA%E7%AC%ACK%E5%B0%8F%E7%9A%84%E6%95%B0%E5%AF%B9%E8%B7%9D%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;找出第K小的数对距离</span><br><span class="line">&gt;数对 (a,b) 由整数 a 和 b 组成，其数对距离定义为 a 和 b 的绝对差值。</span><br><span class="line">&gt;给你一个整数数组 nums 和一个整数 k</span><br><span class="line">&gt;数对由 nums[i] 和 nums[j] 组成且满足 0 &lt;= i &lt; j &lt; nums.length</span><br><span class="line">&gt;返回 所有数对距离中 第 k 小的数对距离。</span><br><span class="line">&gt;测试链接 : https://leetcode.cn/problems/find-k-th-smallest-pair-distance/</span><br></pre></td></tr></table></figure></blockquote><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,3,1], k = 1</span><br><span class="line">输出：0</span><br><span class="line">解释：数对和对应的距离如下：</span><br><span class="line">(1,3) -&gt; 2</span><br><span class="line">(1,1) -&gt; 0</span><br><span class="line">(3,1) -&gt; 2</span><br><span class="line">距离第 1 小的数对是 (1,1) ，距离为 0 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,1], k = 2</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,6,1], k = 3</span><br><span class="line">输出：5</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == nums.length</code></li><li><code>2 &lt;= n &lt;= 104</code></li><li><code>0 &lt;= nums[i] &lt;= 106</code></li><li><code>1 &lt;= k &lt;= n * (n - 1) / 2</code></li></ul><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmallestDistancePair</span> &#123;</span><br><span class="line">    <span class="comment">//有点神奇的题目。用二分答案法来解的话。</span></span><br><span class="line">    <span class="comment">//对数组排序，将问题转换为当数对距离小于等于答案m时，这样的有几对（根据数数来算排名和k对比）</span></span><br><span class="line">    <span class="comment">//分析二分答案的单调性：很明显数对距离和k之间有直接的关系，k就是数对距离的排名。数对距离越大，k越大</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">smallestDistancePair</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">//求二分答案最大范围</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> m, l = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> nums[nums.length - <span class="number">1</span>] - nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r)&#123;</span><br><span class="line">            <span class="comment">//所有数对距离 &lt;= m 有几对？</span></span><br><span class="line">            m =  (r + l) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//看答案和指标的关系</span></span><br><span class="line">            <span class="keyword">if</span> (find(m, nums) &gt;= k)&#123;</span><br><span class="line">                ans = m;</span><br><span class="line">                r = m - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                l = m + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数对距离为m时，在数组中是第x小 （第x小 -》 小于等于x小的有多少）</span></span><br><span class="line">    <span class="comment">//其实就是数对距离小于等于m的有多少对</span></span><br><span class="line">    <span class="comment">//直接滑动窗口：</span></span><br><span class="line">    <span class="comment">//单调性分析，从左到右的数对，越往右 窗口内的数对越大，（每个窗口内数对的最大值，越靠右越大）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//定左扩右</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = <span class="number">0</span>; l &lt; nums.length; l++) &#123;</span><br><span class="line">            <span class="comment">//符合条件就右扩</span></span><br><span class="line">            <span class="comment">//这里写r + 1是只有当r + 1符合条件了，才让r++,即当前r是窗口内的</span></span><br><span class="line">            <span class="keyword">while</span> (r + <span class="number">1</span> &lt; nums.length &amp;&amp; nums[r + <span class="number">1</span>] - nums[l] &lt;= m)&#123;</span><br><span class="line">                r++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//窗口内所有符合条件的数对距离</span></span><br><span class="line">            ans += r - l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 二分答案法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分答案法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器人跳跃问题</title>
      <link href="/2024/05/28/%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%B7%B3%E8%B7%83%E9%97%AE%E9%A2%98/"/>
      <url>/2024/05/28/%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%B7%B3%E8%B7%83%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;机器人跳跃问题</span><br><span class="line">&gt;机器人正在玩一个古老的基于DOS的游戏</span><br><span class="line">&gt;游戏中有N+1座建筑，从0到N编号，从左到右排列</span><br><span class="line">&gt;编号为0的建筑高度为0个单位，编号为i的建筑的高度为H(i)个单位</span><br><span class="line">&gt;起初机器人在编号为0的建筑处</span><br><span class="line">&gt;每一步，它跳到下一个（右边）建筑。假设机器人在第k个建筑，且它现在的能量值是E</span><br><span class="line">&gt;下一步它将跳到第个k+1建筑</span><br><span class="line">&gt;它将会得到或者失去正比于与H(k+1)与E之差的能量</span><br><span class="line">&gt;如果 H(k+1) &gt; E 那么机器人就失去H(k+1)-E的能量值，否则它将得到E-H(k+1)的能量值</span><br><span class="line">&gt;游戏目标是到达第个N建筑，在这个过程中，能量值不能为负数个单位</span><br><span class="line">&gt;现在的问题是机器人以多少能量值开始游戏，才可以保证成功完成游戏</span><br><span class="line">&gt;测试链接 : https://www.nowcoder.com/practice/7037a3d57bbd4336856b8e16a9cafd71</span><br><span class="line">&gt;请同学们务必参考如下代码中关于输入、输出的处理</span><br><span class="line">&gt;这是输入输出处理效率很高的写法</span><br><span class="line">&gt;提交以下的code，提交时请把类名改成&quot;Main&quot;，可以直接通过</span><br></pre></td></tr></table></figure></blockquote><h3 id="输入描述："><a href="#输入描述：" class="headerlink" title="输入描述："></a>输入描述：</h3><p>第一行输入，表示一共有 N 组数据.<br>第二个是 N 个空格分隔的整数，H1, H2, H3, …, Hn 代表建筑物的高度<br>输出描述：<br>输出一个单独的数表示完成游戏所需的最少单位的初始能量</p><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">3 4 3 2 4</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h4><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">4 4 4</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h4 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据约束：</span><br><span class="line">1 &lt;= N &lt;= 10^5</span><br><span class="line">1 &lt;= H(i) &lt;= 10^5</span><br></pre></td></tr></table></figure><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RobotPassThroughBuilding</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAIN</span> <span class="operator">=</span> <span class="number">100001</span>;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[MAIN];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bf</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out));</span><br><span class="line">        <span class="type">StreamTokenizer</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamTokenizer</span>(bf);</span><br><span class="line">        <span class="keyword">while</span> (st.nextToken() != StreamTokenizer.TT_EOF)&#123;</span><br><span class="line">            N = (<span class="type">int</span>) st.nval;</span><br><span class="line">            <span class="comment">//获取答案最大值</span></span><br><span class="line">            <span class="comment">//因为是和当前能量值做对比，所以只要能量是最大高度，则一定能过关</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//这里有个坑，第0个柱子是不用计算的。</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">                st.nextToken();</span><br><span class="line">                <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> (<span class="type">int</span>) st.nval;</span><br><span class="line">                arr[i] = n;</span><br><span class="line">                max = Math.max(max, n);</span><br><span class="line">            &#125;</span><br><span class="line">            out.println(getInitPower(max));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">        bf.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取机器人初始能量</span></span><br><span class="line">    <span class="comment">//答案和问题指标之间存在单调性，（答案越大，问题指标越容易实现，否则反之），所以用二分答案法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getInitPower</span><span class="params">(<span class="type">int</span> max)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> max;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r)&#123;</span><br><span class="line">            m = l + ((r - l) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span> (can(m, max))&#123;</span><br><span class="line">                ans = m;</span><br><span class="line">                r = m - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                l = m + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//当初始能量为m时，能否通过所有柱子</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">can</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> max)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> m;</span><br><span class="line">        <span class="comment">// 注意！</span></span><br><span class="line">        <span class="comment">// 如果给的能量值很大，那么后续能量增长将非常恐怖</span></span><br><span class="line">        <span class="comment">// 完全有可能超出long的范围</span></span><br><span class="line">        <span class="comment">// 所以要在遍历时，一定要加入energy &gt;= max的判断</span></span><br><span class="line">        <span class="comment">// 一旦能量超过高度最大值，后面肯定通关了，可以提前返回了</span></span><br><span class="line">        <span class="comment">// 这里很阴</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">            count += count - arr[i];</span><br><span class="line">            <span class="comment">//查过最大值肯定能通过</span></span><br><span class="line">            <span class="keyword">if</span> (count &gt;= max)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 二分答案法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分答案法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同时运行N台电脑的最长时间</title>
      <link href="/2024/05/28/%E5%90%8C%E6%97%B6%E8%BF%90%E8%A1%8CN%E5%8F%B0%E7%94%B5%E8%84%91%E7%9A%84%E6%9C%80%E9%95%BF%E6%97%B6%E9%97%B4/"/>
      <url>/2024/05/28/%E5%90%8C%E6%97%B6%E8%BF%90%E8%A1%8CN%E5%8F%B0%E7%94%B5%E8%84%91%E7%9A%84%E6%9C%80%E9%95%BF%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>你有 <code>n</code> 台电脑。给你整数 <code>n</code> 和一个下标从 <strong>0</strong> 开始的整数数组 <code>batteries</code> ，其中第 <code>i</code> 个电池可以让一台电脑 <strong>运行</strong> <code>batteries[i]</code> 分钟。你想使用这些电池让 <strong>全部</strong> <code>n</code> 台电脑 <strong>同时</strong> 运行。</p><p>一开始，你可以给每台电脑连接 <strong>至多一个电池</strong> 。然后在任意整数时刻，你都可以将一台电脑与它的电池断开连接，并连接另一个电池，你可以进行这个操作 <strong>任意次</strong> 。新连接的电池可以是一个全新的电池，也可以是别的电脑用过的电池。断开连接和连接新的电池不会花费任何时间。</p><p>注意，你不能给电池充电。</p><p>请你返回你可以让 <code>n</code> 台电脑同时运行的 <strong>最长</strong> 分钟数。</p><p>测试链接 : <a href="https://leetcode.cn/problems/maximum-running-time-of-n-computers/">https://leetcode.cn/problems/maximum-running-time-of-n-computers/</a></p></blockquote><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2022/01/06/example1-fit.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 2, batteries = [3,3,3]</span><br><span class="line">输出：4</span><br><span class="line">解释：</span><br><span class="line">一开始，将第一台电脑与电池 0 连接，第二台电脑与电池 1 连接。</span><br><span class="line">2 分钟后，将第二台电脑与电池 1 断开连接，并连接电池 2 。注意，电池 0 还可以供电 1 分钟。</span><br><span class="line">在第 3 分钟结尾，你需要将第一台电脑与电池 0 断开连接，然后连接电池 1 。</span><br><span class="line">在第 4 分钟结尾，电池 1 也被耗尽，第一台电脑无法继续运行。</span><br><span class="line">我们最多能同时让两台电脑同时运行 4 分钟，所以我们返回 4 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2022/01/06/example2.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 2, batteries = [1,1,1,1]</span><br><span class="line">输出：2</span><br><span class="line">解释：</span><br><span class="line">一开始，将第一台电脑与电池 0 连接，第二台电脑与电池 2 连接。</span><br><span class="line">一分钟后，电池 0 和电池 2 同时耗尽，所以你需要将它们断开连接，并将电池 1 和第一台电脑连接，电池 3 和第二台电脑连接。</span><br><span class="line">1 分钟后，电池 1 和电池 3 也耗尽了，所以两台电脑都无法继续运行。</span><br><span class="line">我们最多能让两台电脑同时运行 2 分钟，所以我们返回 2 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= batteries.length &lt;= 105</code></li><li><code>1 &lt;= batteries[i] &lt;= 109</code></li></ul><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MaxRunTime</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//二分答案法，分析单调性：电池越大，能同时运行时间越久。即答案运行分钟数m和电池之间有单调性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maxRunTime1</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[] batteries)</span> &#123;</span><br><span class="line">        <span class="comment">//获取答案最大范围</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> battery : batteries) &#123;</span><br><span class="line">            sum += battery;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">r</span> <span class="operator">=</span> (sum + n - <span class="number">1</span>) / n;<span class="comment">//向上取整</span></span><br><span class="line">        <span class="comment">//直接拿最大值去试，只要验证小于limit的电池总量，是否符合条件即可</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">avg</span> <span class="operator">=</span> sum / n;</span><br><span class="line">        <span class="keyword">if</span> (can(n, batteries, avg))&#123;</span><br><span class="line">            <span class="keyword">return</span> avg;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模板</span></span><br><span class="line">        <span class="type">long</span> m, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r)&#123;</span><br><span class="line">            <span class="comment">//电脑同时运行的分钟数</span></span><br><span class="line">            m = l + ((r - l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (can(n, batteries, m))&#123;</span><br><span class="line">                l = m + <span class="number">1</span>;</span><br><span class="line">                ans = m;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                r = m - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//原基础上加点贪心</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maxRunTime</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[] batteries)</span> &#123;</span><br><span class="line">        <span class="comment">//获取答案最大范围</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> battery : batteries) &#123;</span><br><span class="line">            sum += battery;</span><br><span class="line">            max = Math.max(battery, max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果电池总量 &gt; 最大电池 * 电脑数.</span></span><br><span class="line">        <span class="comment">// 说明 : 最终的供电时间一定在 &gt;= max，而如果最终的供电时间 &gt;= max (即没有一台电脑是能够单独一个电池供电完毕）</span></span><br><span class="line">        <span class="comment">// 说明 : 对于最终的答案X来说，所有电池都是课上讲的&quot;碎片拼接&quot;的概念</span></span><br><span class="line">        <span class="comment">// 那么直接返回最大时间即可 -》平均值</span></span><br><span class="line">        <span class="keyword">if</span> (sum &gt; (<span class="type">long</span>) max * n)&#123;</span><br><span class="line">            <span class="keyword">return</span> sum / n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">r</span> <span class="operator">=</span> (sum + n - <span class="number">1</span>) / n;<span class="comment">//向上取整</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//模板</span></span><br><span class="line">        <span class="type">long</span> m, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r)&#123;</span><br><span class="line">            <span class="comment">//电脑同时运行的分钟数</span></span><br><span class="line">            m = l + ((r - l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (can(n, batteries, m))&#123;</span><br><span class="line">                l = m + <span class="number">1</span>;</span><br><span class="line">                ans = m;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                r = m - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//n台电脑能否同时运行limit分钟？</span></span><br><span class="line">    <span class="comment">//有点贪心思想</span></span><br><span class="line">    <span class="comment">//电脑取电池策略：</span></span><br><span class="line">    <span class="comment">//如果batteries[i] &gt;= limit 直接给某台电脑用</span></span><br><span class="line">    <span class="comment">//分配完剩下的电池m都是小于limit的。如果电池总量 / 电脑数 &gt;= limit（即每台电脑平均运行时间）。则也符合条件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">can</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[] batteries, <span class="type">long</span> limit)</span>&#123;</span><br><span class="line">        <span class="comment">//区分电池</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; batteries.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (batteries[i] &gt;= limit)&#123;</span><br><span class="line">                n--;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                sum += batteries[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历过程中发现，已经能提供所有电脑同时运行  直接退出</span></span><br><span class="line">            <span class="keyword">if</span> (n &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (sum / n ) &gt;= limit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 二分答案法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分答案法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刀砍毒杀怪兽问题</title>
      <link href="/2024/05/28/%E5%88%80%E7%A0%8D%E6%AF%92%E6%9D%80%E6%80%AA%E5%85%BD%E9%97%AE%E9%A2%98/"/>
      <url>/2024/05/28/%E5%88%80%E7%A0%8D%E6%AF%92%E6%9D%80%E6%80%AA%E5%85%BD%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;刀砍毒杀怪兽问题</span><br><span class="line">&gt;怪兽的初始血量是一个整数hp，给出每一回合刀砍和毒杀的数值cuts和poisons</span><br><span class="line">&gt;第i回合如果用刀砍，怪兽在这回合会直接损失cuts[i]的血，不再有后续效果</span><br><span class="line">&gt;第i回合如果用毒杀，怪兽在这回合不会损失血量，但是之后每回合都损失poisons[i]的血量</span><br><span class="line">&gt;并且你选择的所有毒杀效果，在之后的回合都会叠加</span><br><span class="line">&gt;两个数组cuts、poisons，长度都是n，代表你一共可以进行n回合</span><br><span class="line">&gt;每一回合你只能选择刀砍或者毒杀中的一个动作</span><br><span class="line">&gt;如果你在n个回合内没有直接杀死怪兽，意味着你已经无法有新的行动了</span><br><span class="line">&gt;但是怪兽如果有中毒效果的话，那么怪兽依然会在血量耗尽的那回合死掉</span><br><span class="line">&gt;返回至少多少回合，怪兽会死掉</span><br><span class="line">&gt;数据范围 :</span><br><span class="line">&gt;1 &lt;= n &lt;= 10^5</span><br><span class="line">&gt;1 &lt;= hp &lt;= 10^9</span><br><span class="line">&gt;1 &lt;= cuts[i]、poisons[i] &lt;= 10^9</span><br><span class="line">&gt;本题来自真实大厂笔试，找不到测试链接，所以用对数器验证</span><br></pre></td></tr></table></figure></blockquote><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CutOrPoison</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//只要有用毒杀，那怪兽总会在某一回合死掉，求至少几回合死掉。 -》 即总有答案，求最小答案，看是否能用二分答案法。</span></span><br><span class="line">    <span class="comment">//单调性分析：造成的伤害效果越高，怪兽死得越快。符合单调性。所以用二分答案法解题</span></span><br><span class="line">    <span class="comment">//题目转换为：当回合数为x时，怪兽能否被杀死？</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fast2</span><span class="params">(<span class="type">int</span>[] cuts, <span class="type">int</span>[] poisons, <span class="type">int</span> hp)</span> &#123;</span><br><span class="line">        <span class="comment">//求答案范围</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> hp + <span class="number">1</span>;<span class="comment">//每回合都伤害1点血,那至少要到hp + 1回合</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">//至少1回合</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>, mid = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r)&#123;</span><br><span class="line">            <span class="comment">//在mid回合内，怪兽能否被杀死</span></span><br><span class="line">            mid = l + ((r - l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (killed(mid, cuts, poisons, hp))&#123;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">                ans = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有点贪心思想，哪个伤害高就选哪个</span></span><br><span class="line">    <span class="comment">//其中毒杀的伤害计算为 x * mid</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">killed</span><span class="params">(<span class="type">int</span> mid, <span class="type">int</span>[] cuts, <span class="type">int</span>[] poisons, <span class="type">long</span> hp)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Math.min(poisons.length, mid);</span><br><span class="line">        <span class="comment">//取可操作的回合数</span></span><br><span class="line">        <span class="comment">//这里要注意毒杀伤害的计算，从下一回合开始才生效，即j</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">1</span>; i &lt; min; i++, j++) &#123;</span><br><span class="line">            <span class="comment">//哪个伤害高就取哪个</span></span><br><span class="line">            <span class="comment">//首个回合不计算血量，以剩余回合数 计算毒杀伤害</span></span><br><span class="line">            hp -= Math.max((<span class="type">long</span>)(mid - j) * poisons[i], (<span class="type">long</span>) cuts[i]);</span><br><span class="line">            <span class="keyword">if</span> (hp &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动态规划方法(只是为了验证)</span></span><br><span class="line">    <span class="comment">// 目前没有讲动态规划，所以不需要理解这个函数</span></span><br><span class="line">    <span class="comment">// 这个函数只是为了验证二分答案的方法是否正确的</span></span><br><span class="line">    <span class="comment">// 纯粹为了写对数器验证才设计的方法，血量比较大的时候会超时</span></span><br><span class="line">    <span class="comment">// 这个方法不做要求，此时并不需要理解，可以在学习完动态规划章节之后来看看这个函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fast1</span><span class="params">(<span class="type">int</span>[] cuts, <span class="type">int</span>[] poisons, <span class="type">int</span> hp)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : poisons) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[][][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[cuts.length][hp + <span class="number">1</span>][sum + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> f1(cuts, poisons, <span class="number">0</span>, hp, <span class="number">0</span>, dp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不做要求</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">f1</span><span class="params">(<span class="type">int</span>[] cuts, <span class="type">int</span>[] poisons, <span class="type">int</span> i, <span class="type">int</span> r, <span class="type">int</span> p, <span class="type">int</span>[][][] dp)</span> &#123;</span><br><span class="line">        r -= p;</span><br><span class="line">        <span class="keyword">if</span> (r &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == cuts.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> cuts.length + <span class="number">1</span> + (r + p - <span class="number">1</span>) / p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[i][r][p] != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[i][r][p];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> r &lt;= cuts[i] ? (i + <span class="number">1</span>) : f1(cuts, poisons, i + <span class="number">1</span>, r - cuts[i], p, dp);</span><br><span class="line">        <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> f1(cuts, poisons, i + <span class="number">1</span>, r, p + poisons[i], dp);</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> Math.min(p1, p2);</span><br><span class="line">        dp[i][r][p] = ans;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对数器测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 随机测试的数据量不大</span></span><br><span class="line">        <span class="comment">// 因为数据量大了，fast1方法会超时</span></span><br><span class="line">        <span class="comment">// 所以在数据量不大的情况下，验证fast2方法功能正确即可</span></span><br><span class="line">        <span class="comment">// fast2方法在大数据量的情况下一定也能通过</span></span><br><span class="line">        <span class="comment">// 因为时间复杂度就是最优的</span></span><br><span class="line">        System.out.println(<span class="string">&quot;测试开始&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">V</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">H</span> <span class="operator">=</span> <span class="number">300</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">testTimes</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; testTimes; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.random() * N) + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span>[] cuts = randomArray(n, V);</span><br><span class="line">            <span class="type">int</span>[] posions = randomArray(n, V);</span><br><span class="line">            <span class="type">int</span> <span class="variable">hp</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.random() * H) + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ans1</span> <span class="operator">=</span> fast1(cuts, posions, hp);</span><br><span class="line">            <span class="type">int</span> <span class="variable">ans2</span> <span class="operator">=</span> fast2(cuts, posions, hp);</span><br><span class="line">            <span class="keyword">if</span> (ans1 != ans2) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;出错了!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对数器测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] randomArray(<span class="type">int</span> n, <span class="type">int</span> v) &#123;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            ans[i] = (<span class="type">int</span>) (Math.random() * v) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 二分答案法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分答案法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爱吃香蕉的珂珂</title>
      <link href="/2024/05/24/%E7%88%B1%E5%90%83%E9%A6%99%E8%95%89%E7%9A%84%E7%8F%82%E7%8F%82/"/>
      <url>/2024/05/24/%E7%88%B1%E5%90%83%E9%A6%99%E8%95%89%E7%9A%84%E7%8F%82%E7%8F%82/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><blockquote><p><strong>爱吃香蕉的珂珂</strong>  </p><p>珂珂喜欢吃香蕉。这里有 <code>n</code> 堆香蕉，第 <code>i</code> 堆中有 <code>piles[i]</code> 根香蕉。警卫已经离开了，将在 <code>h</code> 小时后回来。</p><p>珂珂可以决定她吃香蕉的速度 <code>k</code> （单位：根&#x2F;小时）。每个小时，她将会选择一堆香蕉，从中吃掉 <code>k</code> 根。如果这堆香蕉少于 <code>k</code> 根，她将吃掉这堆的所有香蕉，然后这一小时内不会再吃更多的香蕉。 </p><p>珂珂喜欢慢慢吃，但仍然想在警卫回来前吃掉所有的香蕉。</p><p>返回她可以在 <code>h</code> 小时内吃掉所有香蕉的最小速度 <code>k</code>（<code>k</code> 为整数）。</p><p>测试链接 : <a href="https://leetcode.cn/problems/koko-eating-bananas/">https://leetcode.cn/problems/koko-eating-bananas/</a>  </p></blockquote><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：piles = [3,6,7,11], h = 8</span><br><span class="line">输出：4</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：piles = [30,11,23,4,20], h = 5</span><br><span class="line">输出：30</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：piles = [30,11,23,4,20], h = 6</span><br><span class="line">输出：23</span><br></pre></td></tr></table></figure><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinEatingSpeed</span> &#123;</span><br><span class="line">    <span class="comment">//求最小速度k，满足在h小时内吃光。</span></span><br><span class="line">    <span class="comment">// 即总有k能吃完，求最小答案。直接二分答案法求k。条件逻辑是判断k是否能在h小时吃完</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minEatingSpeed</span><span class="params">(<span class="type">int</span>[] piles, <span class="type">int</span> h)</span> &#123;</span><br><span class="line">        <span class="comment">//二分答案法模板</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//求答案范围，最大范围就是数组最大值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> pile : piles) &#123;</span><br><span class="line">            r = Math.max(pile, r);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//二分答案</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r)&#123;</span><br><span class="line">            m = l + ((r-l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (canEat(piles, h, m))&#123;</span><br><span class="line">                r = m - <span class="number">1</span>;</span><br><span class="line">                ans = m;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                l = m + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//问题主逻辑 判断k速度下，能否在h小时内吃完</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canEat</span><span class="params">(<span class="type">int</span>[] piles, <span class="type">int</span> h, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; piles.length;i++) &#123;</span><br><span class="line">            <span class="comment">// (a/b)结果向上取整，如果a和b都是非负数，可以写成(a+b-1)/b</span></span><br><span class="line">            ans += (piles[i] + k - <span class="number">1</span>) / k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans &lt;= h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 二分答案法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分答案法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/05/23/hello-world/"/>
      <url>/2024/05/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 首个分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第二个标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my-first-blog</title>
      <link href="/2024/05/23/my-first-blog/"/>
      <url>/2024/05/23/my-first-blog/</url>
      
        <content type="html"><![CDATA[<p>我的第一个博客，markdown风格不太熟</p><p>用来记录学习过程。包括算法、常见框架、JVM、mysql等等</p><p>想搞个目录跳转，怎么搞呢？</p><span id="more"></span><p>以下是更多内容，敬请期待~~</p>]]></content>
      
      
      
        <tags>
            
            <tag> 首个标签 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
